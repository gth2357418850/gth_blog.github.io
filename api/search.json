[{"id":"33acdddb35650af797ecddd2d38891a7","title":"要好好学习天天向上哟","content":"鸽巢原理进行排序https://leetcode.cn/problems/missing-two-lcci/\n123for (int i=0 ; i&lt;nums.size() ; i++)&#123;\twhile(nums[i] != -1 &amp;&amp; nums[i] != i+1) swap(nums[i] , nums[nums[i]-1]);&#125;\n\n说明：此模板用于对有规律的数进行排序，核心思想是一个萝卜一个坑。\n桌上有十个苹果，要把这十个苹果放到九个抽屉里，无论怎样放，我们会发现至少会有一个抽屉里面放不少于两个苹果。这一现象就是我们所说的“抽屉原理”。 抽屉原理的一般含义为：“如果每个抽屉代表一个集合，每一个苹果就可以代表一个元素，假如有n+1个元素放到n个集合中去，其中必定有一个集合里至少有两个元素。” 抽屉原理有时也被称为鸽巢原理。本质上是对哈希定址法的改变。\n排序算法（归并排序）这里放题目\n对于归并排序我是这样理解的，对于一个未排序的数组，我们可以将其对半分开，分开后再将其按顺序合并，那么具体的合并流程呢？首先需要先创建一个新的数组（这个数组容量为两个子数组容量的和），然后将两个子数组按大小排入这个新数组中，因为我们是将小块合并所以保证在前面的数组是按照规则排序的，那么后面的只需要比较两个小数组的第一个值即可保证不错位。\n\n\nPython排序进阶（工具）https://leetcode.cn/problems/largest-number/\n我们知道Python中排序有sorted(_iterable, key, reverse),而这里我们着重来说这个“key”，这个“key”是让我们sorted()函数真正好用的关键。\n针对key我们可以用lambda:或写函数来改变，也可以通过functools模块中的cmp_to_key来对自定义的cmp函数进行包装，然后就能赋值给sorted函数的关键字参数key，来间接实现Python2中cmp函数用于排序的效果。\nPython排序进阶(2)（工具）https://leetcode.cn/problems/advantage-shuffle/\nPython中还提供了一个排序的库（sortedcontainers）。\n这个库提供了三个类：SortedList 、SortedDict、SortedSet。我们可以直接声明一个SortedList对象，这个对象会直接对列表中的值进行排序，\n123456import sortedcontainerst = sortedcontainers.SortedList([4, 2, 5, 3, 1])print(t)&gt;&gt;SortedList([1, 2, 3, 4, 5])\n\n常见的方法：add()、remove()、discard()、pop()、bisect_left()、count()。\n\n\n\n方法\n时间复杂度\n说明\n\n\n\nadd()\n近似O(logn)\n向SortedList()中添加元素\n\n\nupdate(iterable)\n近似O(k*logn)\n向SortedList()中添加列表\n\n\nclear()\nO(n)\n删除所以元素\n\n\ndiscard(value)\n近似O(logn)\n删除单个元素（元素可不存在）\n\n\nremove()\n近似O(logn)\n删除单个元素（元素不存在报错）\n\n\npop(index&#x3D;-1)\n近似O(logn)\n同列表pop\n\n\nbisect_left(value)\n近似O(logn)\n找出元素位置\n\n\ncount()\n近似O(logn)\n查找个数\n\n\nindex()\n近似O(logn)\n同列表index\n\n\nSortedList的排序方法是系统默认的，我们也可以设置排序方法，比如数值从大到小排序\n123456789from sortedcontainers import SortedListfrom operator import neg test_sl = SortedList([3,5,1,2,7,6,4], key=neg) print(test_sl) output:SortedKeyList([7, 6, 5, 4, 3, 2, 1], key=&lt;built-in function neg&gt;)\n\n1234567from sortedcontainers import SortedList test_str = SortedList([&quot;1&quot;, &quot;431&quot;, &quot;34&quot;], key=lambda item:len(item))print(test_str) output:SortedKeyList([&#x27;1&#x27;, &#x27;34&#x27;, &#x27;431&#x27;], key=&lt;function &lt;lambda&gt; at 0x7fb883b36820&gt;)\n\n\n\n回溯（全排列）模板https://leetcode.cn/problems/permutations/\n题目分析：就这道题目而言，因其不包含重复数字，故不需考虑重复问题，那么怎么样实现全排列呢？我们从小都知道，全排列要有条理的从原列表中一个个拿出，而拿出后我们应该将这个元素去掉！所以我们就可以有思路了。本质上我们应将数字从列表中一个个拿出这样我们可以用一层循环遍历。用“我”的浅薄装逼的表示即为：\n$f(x+1)&#x3D;f(x)+d[i]$\n解释：$f(x)$为我们要组成的结果，$d[i]$为列表中的元素。列表元素是一遍遍减少的！这个是重要的\n代码：1234567891011class Solution:    def permute(self, nums: List[int]) -&gt; List[List[int]]:        res = []        def backtracking(nums, t):            if not nums:                res.append(t)                return            for i in range(len(nums)):                backtracking(nums[:i]+nums[i+1:],t+[nums[i]])        backtracking(nums,[])        return res\n\n再说回来回溯法：采用试错的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：\n找到一个可能存在的正确的答案；在尝试了所有可能的分步方法后宣告该问题没有答案。\n回溯算法关键在于：不合适就退回上一步，然后通过约束条件, 减少时间复杂度。其和深度搜索算法是有些相似之处的。\n","slug":"刷题不","date":"2022-10-25T12:30:21.151Z","categories_index":"算法","tags_index":"算法","author_index":"Gaoth"}]