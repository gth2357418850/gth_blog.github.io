{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"// OLD VERSION DO NOT USE // Older pens still rely on this. /** * MyMath.js * ----------- * Handy math/trig reference. * * Author: Caleb Mil...","date":"2022-12-31T15:07:14.934Z","updated":"2022-12-31T14:40:27.728Z","comments":true,"path":"api/pages/newyear/files/js/MyMath.js","covers":null,"excerpt":"","content":"// OLD VERSION DO NOT USE\n// Older pens still rely on this.\n\n/**\n * MyMath.js\n * -----------\n * Handy math/trig reference.\n * \n * Author: Caleb Miller\n *         caleb@caleb-miller.com\n */\n\nconst MyMath = (function MyMathFactory(Math) {\n\n    const MyMath = {};\n\n\n    // degree/radian conversion constants\n    MyMath.toDeg = 180 / Math.PI;\n    MyMath.toRad = Math.PI / 180;\n    MyMath.halfPI = Math.PI / 2;\n    MyMath.twoPI = Math.PI * 2;\n\n    // Pythagorean Theorem distance calculation\n    MyMath.dist = (width, height) => {\n        return Math.sqrt(width * width + height * height);\n    };\n\n    // Pythagorean Theorem point distance calculation\n    // Same as above, but takes coordinates instead of dimensions.\n    MyMath.pointDist = (x1, y1, x2, y2) => {\n        const distX = x2 - x1;\n        const distY = y2 - y1;\n        return Math.sqrt(distX * distX + distY * distY);\n    };\n\n    // Returns the angle (in radians) of a 2D vector\n    MyMath.angle = (width, height) => (MyMath.halfPI + Math.atan2(height, width));\n\n    // Returns the angle (in radians) between two points\n    // Same as above, but takes coordinates instead of dimensions.\n    MyMath.pointAngle = (x1, y1, x2, y2) => (MyMath.halfPI + Math.atan2(y2 - y1, x2 - x1));\n\n    // Splits a speed vector into x and y components (angle needs to be in radians)\n    MyMath.splitVector = (speed, angle) => ({\n        x: Math.sin(angle) * speed,\n        y: -Math.cos(angle) * speed\n    });\n\n    // Generates a random number between min (inclusive) and max (exclusive)\n    MyMath.random = (min, max) => Math.random() * (max - min) + min;\n\n    // Generates a random integer between and possibly including min and max values\n    MyMath.randomInt = (min, max) => ((Math.random() * (max - min + 1)) | 0) + min;\n\n    // Returns a random element from an array, or simply the set of provided arguments when called\n    MyMath.randomChoice = function randomChoice(choices) {\n        if (arguments.length === 1 && Array.isArray(choices)) {\n            return choices[(Math.random() * choices.length) | 0];\n        }\n        return arguments[(Math.random() * arguments.length) | 0];\n    };\n\n    // Clamps a number between min and max values\n    MyMath.clamp = function clamp(num, min, max) {\n        return Math.min(Math.max(num, min), max);\n    };\n\n\n    return MyMath;\n\n})(Math);","count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"toc":""}