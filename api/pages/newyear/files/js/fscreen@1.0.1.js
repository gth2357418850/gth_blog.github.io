{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"// A manual UMD build of Fscreen: https://github.com/rafrex/fscreen (function(global) { 'use strict'; var key = { fullscreenEnabled: 0, full...","date":"2022-12-31T15:07:14.941Z","updated":"2022-12-31T14:40:27.728Z","comments":true,"path":"api/pages/newyear/files/js/fscreen@1.0.1.js","covers":null,"excerpt":"","content":"// A manual UMD build of Fscreen: https://github.com/rafrex/fscreen\n\n(function(global) {\n    'use strict';\n\n    var key = {\n        fullscreenEnabled: 0,\n        fullscreenElement: 1,\n        requestFullscreen: 2,\n        exitFullscreen: 3,\n        fullscreenchange: 4,\n        fullscreenerror: 5\n    };\n\n    var webkit = ['webkitFullscreenEnabled', 'webkitFullscreenElement', 'webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitfullscreenchange', 'webkitfullscreenerror'];\n\n    var moz = ['mozFullScreenEnabled', 'mozFullScreenElement', 'mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozfullscreenerror'];\n\n    var ms = ['msFullscreenEnabled', 'msFullscreenElement', 'msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'MSFullscreenError'];\n\n    // so it doesn't throw if no window or document\n    var doc = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\n    var vendor = 'fullscreenEnabled' in doc && Object.keys(key) || webkit[0] in doc && webkit || moz[0] in doc && moz || ms[0] in doc && ms || [];\n\n    var fscreen = {\n        requestFullscreen: function requestFullscreen(element) {\n            return element[vendor[key.requestFullscreen]]();\n        },\n        requestFullscreenFunction: function requestFullscreenFunction(element) {\n            return element[vendor[key.requestFullscreen]];\n        },\n        get exitFullscreen() {\n            return doc[vendor[key.exitFullscreen]].bind(doc);\n        },\n        addEventListener: function addEventListener(type, handler, options) {\n            return doc.addEventListener(vendor[key[type]], handler, options);\n        },\n        removeEventListener: function removeEventListener(type, handler) {\n            return doc.removeEventListener(vendor[key[type]], handler);\n        },\n        get fullscreenEnabled() {\n            return Boolean(doc[vendor[key.fullscreenEnabled]]);\n        },\n        set fullscreenEnabled(val) {},\n        get fullscreenElement() {\n            return doc[vendor[key.fullscreenElement]];\n        },\n        set fullscreenElement(val) {},\n        get onfullscreenchange() {\n            return doc[('on' + vendor[key.fullscreenchange]).toLowerCase()];\n        },\n        set onfullscreenchange(handler) {\n            return doc[('on' + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n        },\n        get onfullscreenerror() {\n            return doc[('on' + vendor[key.fullscreenerror]).toLowerCase()];\n        },\n        set onfullscreenerror(handler) {\n            return doc[('on' + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n        }\n    };\n\n    global.fscreen = fscreen;\n})(window);","count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"toc":""}